// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Pb.Geo.Service.Models;
//
//    var point = Point.FromJson(jsonString);
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Pb.Geo.Service.Models;

public interface IPointLoader
{
    IEnumerable<Point> Points { get; }
}

public class PointLoader : IPointLoader
{
    public IEnumerable<Point> Points { get; }

    public PointLoader(string filePath)
    {
        var jsonString = File.ReadAllText(filePath);
        Points = Point.FromJson(jsonString);
    }
}
public partial class Point
{
    [JsonProperty("hotelId")]
    public string HotelId { get; set; }

    [JsonProperty("lat")]
    public float? Lat { get; set; }

    [JsonProperty("lon")]
    public float? Lon { get; set; }
}

public partial class Point
{
    public static IEnumerable<Point> FromJson(string json) => JsonConvert.DeserializeObject<IEnumerable<Point>>(json, Pb.Geo.Service.Models.Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this Point[] self) => JsonConvert.SerializeObject(self, Pb.Geo.Service.Models.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
        {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}

internal class ParseStringConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}

